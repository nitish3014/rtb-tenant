plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.rtb.tenant'
description = 'RTB tenant service'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

ext {
    springVersion = "3.1.2"
    postgresqlVersion = "42.6.0"
    lombokVersion = "1.18.32"
    logstashVersion = "6.4"
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashVersion}"
    implementation name: 'rtb-core-0.0.1-SNAPSHOT'

    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'
    implementation group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.1.1.RELEASE'

    implementation "org.springframework.boot:spring-boot-starter-oauth2-authorization-server:${springVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-webflux'


    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.1'
    implementation 'software.amazon.awssdk:quicksight:2.20.33' // AWS SDK for QuickSight
    implementation 'software.amazon.awssdk:core:2.20.33'       // Core SDK module
    implementation 'software.amazon.awssdk:auth:2.20.33'       // Authentication module

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    developmentOnly "org.springframework.boot:spring-boot-devtools:${springVersion}"

    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springVersion}"
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Generate JaCoCo report after tests run
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/controller/**', // Exclude the entire controller package
                    '**/entity/**', // Exclude the entity package
                    '**/repository/**',
                    '**/exception/**',
                    '**/configuration/**'
            ])
        }))
    }
}

check.dependsOn jacocoTestCoverageVerification
checkstyle {
    configFile file("checkstyle/checkstyle.xml")
}
