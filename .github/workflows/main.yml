name: CI/CD Deploy to EKS via Bastion

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: 972251037797
      EKS_CLUSTER_NAME: rtb-eks-dev
      DEPLOYMENT_NAME: rtb-dev-tenant-service
      K8S_NAMESPACE: default
      BASTION_IP: 35.170.113.92
      BASTION_USER: ubuntu
      S3_BUCKET_NAME: rtb-dev-artifact
      S3_ARTIFACT_KEY: rtb-core-0.0.1-SNAPSHOT.jar

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Sync code to Bastion
        run: |
          rsync -avz --delete --exclude='.git' ./ ${{ env.BASTION_USER }}@${{ env.BASTION_IP }}:/home/${{ env.BASTION_USER }}/app-source

      - name: Build and Push Docker image on Bastion
        env:
          IMAGE_URI: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DEPLOYMENT_NAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
          S3_ARTIFACT_KEY: ${{ env.S3_ARTIFACT_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.BASTION_USER }}@${{ env.BASTION_IP }} bash -c "'
            set -e
            cd /home/${{ env.BASTION_USER }}/app-source

            echo Fetching core artifact from S3...
            mkdir -p libs
            aws s3 cp s3://$S3_BUCKET_NAME/$S3_ARTIFACT_KEY libs/

            echo Logging into ECR...
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            echo Building Docker image...
            docker build --platform linux/arm64 -t $IMAGE_URI:latest .

            echo Pushing Docker image...
            docker push $IMAGE_URI:latest

            echo Cleaning up Docker system...
            docker system prune -af

            echo Cleaning up workspace...
            rm -rf libs
          '"

      - name: Fetch kubeconfig via Bastion
        run: |
          echo "${{ secrets.BASTION_PEM_KEY }}" > bastion_key.pem
          chmod 600 bastion_key.pem
          scp -o StrictHostKeyChecking=no -i bastion_key.pem ${{ env.BASTION_USER }}@${{ env.BASTION_IP }}:~/.kube/config ./kubeconfig

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Create/update Kubernetes secrets
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          DB=$(aws secretsmanager get-secret-value --secret-id rtb-dev/db --query SecretString --output text)
          AW=$(aws secretsmanager get-secret-value --secret-id rtb-dev/aws --query SecretString --output text)
          SERVICE=$(aws secretsmanager get-secret-value --secret-id rtb-dev/tenant-service --query SecretString --output text)

          if [ -z "$DB" ] || [ -z "$AW" ]; then
            echo "❌ Missing AWS secrets" && exit 1
          fi

          echo "$DB" | jq -r 'to_entries|.[]|"\(.key)=\(.value)"' > /tmp/secrets.env
          echo "$AW" | jq -r 'to_entries|.[]|"\(.key)=\(.value)"' >> /tmp/secrets.env
          echo "$SERVICE" | jq -r 'to_entries|.[]|"\(.key)=\(.value)"' >> /tmp/secrets.env

          tac /tmp/secrets.env | awk -F= '!seen[$1]++' | tac > /tmp/secrets.unique.env

          PUB_B64=$(base64 public_key.pem | tr -d '\n')
          echo "PUBLIC_KEY_CONTENT=${PUB_B64}" >> /tmp/secrets.unique.env

          kubectl delete secret ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} --ignore-not-found
          kubectl create secret generic ${{ env.DEPLOYMENT_NAME }} --from-env-file=/tmp/secrets.unique.env -n ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy updated image to EKS
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
          IMAGE_URI: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DEPLOYMENT_NAME }}
        run: |
          kubectl -n ${{ env.K8S_NAMESPACE }} patch deployment ${{ env.DEPLOYMENT_NAME }} -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"deployTime\":\"$(date +'%s')\"}}}}}"
          kubectl -n ${{ env.K8S_NAMESPACE }} set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.DEPLOYMENT_NAME }}=$IMAGE_URI:latest
          kubectl -n ${{ env.K8S_NAMESPACE }} rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=300s
